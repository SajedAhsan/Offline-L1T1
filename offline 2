#include<stdio.h>
#include<string.h>
#include <math.h>
#include <time.h>
#include <stdlib.h>
#define MAX_SIZE 1000000
#define MAX_BINS 1000
#define MAX_STARS 50
double array[MAX_SIZE];
int bin_count[MAX_BINS];
#define PI 3.14159265358979323846
double mean,stddev,min,max,size,seed;
double max_ans,min_ans,mean_ans=0,stddev_ans=0;
// Function to generate a normally distributed random number
double generate_normal(double mu, double sigma) {
  double U1 = (double)rand() / (double)RAND_MAX;
  double U2 = (double)rand() / (double)RAND_MAX;
  double X1 = sqrt(-2 * log(U1)) * cos(2 * PI * U2);
  return mu + sigma * X1;
}

void populate_array_gaussian(double *array, int size, double mu, double sigma, unsigned int seed) {
    srand(seed);
    for (int i = 0; i < size; i++) {
        array[i] = generate_normal(mu, sigma);
    }
}

void populate_array_uniform(double *array, int size, double min, double max, unsigned int seed) {
    srand(seed);
    for (int i = 0; i < size; i++) {
        array[i] = min + (double)rand() / ((double)RAND_MAX / (max - min));
    }
}
int main() {
   printf("Commands:\n");
   printf("  set     - Set array size, seed, and distribution (uniform or gaussian)\n");
   printf("  min     - Print minimum value\n");
   printf("  max     - Print maximum value\n");
   printf("  mean    - Print mean value\n");
   printf("  stddev  - Print standard deviation\n");
   printf("  hist    - Plot histogram\n");
   printf("  summary - Print min, max, mean, stddev\n");
   printf("  help    - Show this help message\n");
   printf("  exit    - Exit the program\n");
   int t = 2;
   int flag = 0;
   while(t){
      char command[100];
      int n;
      printf("Enter command: ");
      scanf("%s", command);
      if(flag==0 && strcmp("set",command)!=0){
         printf("Array not initialized. Use 'set' command first.\n");
         continue;
      }
      if(strcmp("set",command)==0){
         flag++;
         printf("Enter number of elements (<= 100000): ");
         scanf("%lf",&size);
         printf("Enter seed: ");
         scanf("%lf",&seed);
         char distribution[100];
         int count = 0;
         while(strcmp("gaussian",distribution)!=0 && strcmp("uniform",distribution)!=0){
               if(count) printf("Invalid distribution\n");
               printf("Distribution? (uniform/gaussian): ");
               scanf("%s", distribution);
               count++;
         }
         if(strcmp("gaussian",distribution)==0){
            printf("Enter mean and stddev: ");
            scanf("%lf%lf",&mean,&stddev);
            printf("Array initialized with gaussian distribution.\n");
            populate_array_gaussian(array, size, mean, stddev, seed);
         }else{
            printf("Enter min and max: ");
            scanf("%lf%lf",&min,&max);
            printf("Array initialized with uniform distribution.\n");
            populate_array_uniform(array, size, min, max, seed);
         }
         max_ans=array[0];
         for(int i=0;i<size;i++){
            if(max_ans<array[i]){
               max_ans = array[i];
            }
         }
         min_ans=array[0];
         for(int i=0;i<size;i++){
            if(min_ans>array[i]){
               min_ans = array[i];
            }
         }
         for(int i=0;i<size;i++){
            mean_ans+=array[i];
         }
         mean_ans = mean_ans/size;

      }else if(strcmp("min",command)==0){
         printf("Min       :   %.4lf\n",min_ans);
      }else if(strcmp("max",command)==0){
         printf("Max       :    %.4lf\n",max_ans);
      }else if(strcmp("mean",command)==0){
         printf("Mean      :     %.4lf\n",mean_ans);
      }else if(strcmp("stddev",command)==0){
         for(int i=0;i<size;i++){
            stddev_ans+=abs((array[i]-mean_ans)*(array[i]-mean_ans));
         }
         stddev_ans = stddev_ans/size;
         stddev_ans = sqrt(stddev_ans);
         printf("Std Dev   :     %.4lf\n",stddev_ans);
      }else if(strcmp("hist",command)==0){
         printf("Enter number of bins: ");
         int bin_num;
         scanf("%d",&bin_num);
         while(bin_num>MAX_BINS || bin_num<0){
            printf("Invalid number of bins. Must be between 1 and 1000.\n");
            printf("Enter number of bins: ");
            scanf("%d",&bin_num);
         }
         double bin_distance = abs(max_ans-min_ans)/bin_num;
         for(int i=0;i<size;i++){
            int bin_index = (int)((array[i] - min_ans) / bin_distance);
            bin_count[bin_index]++;
         }
         
         double tmp=min_ans;
         for(int i=0;i<bin_num;i++){
            printf("[%.2lf - %.2lf]: ",tmp,(tmp+bin_distance));
            tmp = tmp+bin_distance;
            for(int j=0;j<bin_count[i];j++){
               printf("*");
            }
            printf("\n");
         }

      }else if(strcmp("summary",command)==0){
         printf("Min       :   %.4lf\n",min_ans);
         printf("Max       :    %.4lf\n",max_ans);
         printf("Mean      :     %.4lf\n",mean_ans);
         printf("Std Dev   :     %.4lf\n",stddev_ans);
      }else if(strcmp("help",command)==0){
         printf("Commands:\n");
         printf("  set     - Set array size, seed, and distribution (uniform or gaussian)\n");
         printf("  min     - Print minimum value\n");
         printf("  max     - Print maximum value\n");
         printf("  mean    - Print mean value\n");
         printf("  stddev  - Print standard deviation\n");
         printf("  hist    - Plot histogram\n");
         printf("  summary - Print min, max, mean, stddev\n");
         printf("  help    - Show this help message\n");
         printf("  exit    - Exit the program\n");

      }else if(strcmp("exit",command)==0){
         break;
      }else{
         printf("Invalid command\n");
      }

   }

}
